{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nexport async function getModels() {\n  try {\n    const response = await fetch(`${API_URL}/models`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching models:', error);\n    throw error;\n  }\n}\nexport async function getModes() {\n  try {\n    const response = await fetch(`${API_URL}/modes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching modes:', error);\n    throw error;\n  }\n}\nexport async function sendMessage(model, mode, message, hint) {\n  const response = await fetch(`${API_URL}/chat`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      model,\n      mode,\n      message,\n      hint\n    })\n  });\n  if (!response.ok) {\n    throw new Error('发送消息失败');\n  }\n  return await response.json();\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getModels","response","fetch","ok","Error","status","json","error","console","getModes","sendMessage","model","mode","message","hint","method","headers","body","JSON","stringify"],"sources":["/Users/mannormal/star-ai-assistant/frontend/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nexport async function getModels() {\n  try {\n    const response = await fetch(`${API_URL}/models`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching models:', error);\n    throw error;\n  }\n}\n\nexport async function getModes() {\n  try {\n    const response = await fetch(`${API_URL}/modes`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching modes:', error);\n    throw error;\n  }\n}\n\nexport async function sendMessage(model, mode, message, hint) {\n  const response = await fetch(`${API_URL}/chat`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ model, mode, message, hint }),\n  });\n  if (!response.ok) {\n    throw new Error('发送消息失败');\n  }\n  return await response.json();\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,eAAeC,SAASA,CAAA,EAAG;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,SAAS,CAAC;IACjD,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeE,QAAQA,CAAA,EAAG;EAC/B,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,QAAQ,CAAC;IAChD,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeG,WAAWA,CAACC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAC5D,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,OAAO,EAAE;IAC9CmB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC,IAAI;MAAEC,OAAO;MAAEC;IAAK,CAAC;EACrD,CAAC,CAAC;EACF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;EAC3B;EACA,OAAO,MAAMH,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}