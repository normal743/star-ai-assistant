{"ast":null,"code":"var _jsxFileName = \"/Users/mannormal/star-ai-assistant/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Message from './Message';\nimport HintInput from './HintInput';\nimport { sendMessage } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  model,\n  mode\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [hint, setHint] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() === '') return;\n    const newMessage = {\n      role: 'user',\n      content: inputMessage\n    };\n    setMessages([...messages, newMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await sendMessage(model, mode, inputMessage, hint);\n      let messageContent;\n      if (model === 'llama3.1:8b') {\n        // Assuming response contains a \"response\" field in this case\n        messageContent = response.response; // Extract the content for llama3.1:8b\n      } else {\n        // For other models, use the \"message\" field\n        messageContent = response.message;\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: messageContent\n      }]);\n    } catch (error) {\n      console.error('发送消息时出错:', error);\n      setError('发送消息失败，请稍后重试。');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"AI\\u6B63\\u5728\\u601D\\u8003\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(HintInput, {\n        hint: hint,\n        setHint: setHint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"\\u8F93\\u5165\\u4F60\\u7684\\u6D88\\u606F...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: isLoading,\n        children: \"\\u53D1\\u9001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"6eu4pt4pNCekxBIAiMDKrFI0xgA=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","Message","HintInput","sendMessage","jsxDEV","_jsxDEV","Chat","model","mode","_s","messages","setMessages","inputMessage","setInputMessage","hint","setHint","isLoading","setIsLoading","error","setError","handleSendMessage","trim","newMessage","role","content","response","messageContent","message","prevMessages","console","handleKeyPress","event","key","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/mannormal/star-ai-assistant/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Message from './Message';\nimport HintInput from './HintInput';\nimport { sendMessage } from '../services/api';\n\nfunction Chat({ model, mode }) {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [hint, setHint] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() === '') return;\n\n    const newMessage = { role: 'user', content: inputMessage };\n    setMessages([...messages, newMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await sendMessage(model, mode, inputMessage, hint);\n      let messageContent;\n      if (model === 'llama3.1:8b') {\n        // Assuming response contains a \"response\" field in this case\n        messageContent = response.response; // Extract the content for llama3.1:8b\n      } else {\n        // For other models, use the \"message\" field\n        messageContent = response.message;\n}\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: 'assistant', content: messageContent }\n      ]);\n    } catch (error) {\n      console.error('发送消息时出错:', error);\n      setError('发送消息失败，请稍后重试。');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"message-list\">\n        {messages.map((message, index) => (\n          <Message key={index} message={message} />\n        ))}\n        {isLoading && <div className=\"loading\">AI正在思考中...</div>}\n        {error && <div className=\"error\">{error}</div>}\n      </div>\n      <div className=\"input-area\">\n        <HintInput hint={hint} setHint={setHint} />\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"输入你的消息...\"\n        />\n        <button onClick={handleSendMessage} disabled={isLoading}>\n          发送\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}