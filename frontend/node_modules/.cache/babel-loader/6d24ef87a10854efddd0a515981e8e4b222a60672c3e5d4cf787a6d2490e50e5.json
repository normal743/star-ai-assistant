{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nasync function fetchWithLogging(url, options = {}) {\n  console.log(`Fetching from: ${url}`);\n  console.log('Fetch options:', options);\n  try {\n    const response = await fetch(url, options);\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n    const text = await response.text();\n    console.log('Response text:', text);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);\n    }\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n      throw new Error('Invalid JSON in response');\n    }\n    console.log('Parsed data:', data);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching from ${url}:`, error);\n    throw error;\n  }\n}\nexport async function getModels() {\n  console.log('getModels called');\n  return fetchWithLogging(`${API_URL}/models`);\n}\nexport async function getModes() {\n  console.log('getModes called');\n  return fetchWithLogging(`${API_URL}/modes`);\n}\nexport async function sendMessage(model, mode, message, hint) {\n  console.log('sendMessage called with:', {\n    model,\n    mode,\n    message,\n    hint\n  });\n  return fetchWithLogging(`${API_URL}/chat`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      model,\n      mode,\n      message,\n      hint\n    })\n  });\n}\n\n// 添加一个用于测试 API 连接的函数\nexport async function testApiConnection() {\n  console.log('Testing API connection');\n  try {\n    console.log('Test API_URL', API_URL);\n    const response = await fetch(`${API_URL}/test`);\n    console.log('Test response status:', response.status);\n    const text = await response.text();\n    console.log('Test response text:', text);\n    return text;\n  } catch (error) {\n    console.error('Error testing API connection:', error);\n    throw error;\n  }\n}\n\n// 打印 API_URL 以确保环境变量被正确加载\nconsole.log('API_URL:', API_URL);","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchWithLogging","url","options","console","log","response","fetch","status","headers","text","ok","Error","data","JSON","parse","error","getModels","getModes","sendMessage","model","mode","message","hint","method","body","stringify","testApiConnection"],"sources":["/Users/mannormal/star-ai-assistant/frontend/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nasync function fetchWithLogging(url, options = {}) {\n  console.log(`Fetching from: ${url}`);\n  console.log('Fetch options:', options);\n\n  try {\n    const response = await fetch(url, options);\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n\n    const text = await response.text();\n    console.log('Response text:', text);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);\n    }\n\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch (error) {\n      console.error('Error parsing JSON:', error);\n      throw new Error('Invalid JSON in response');\n    }\n\n    console.log('Parsed data:', data);\n    return data;\n  } catch (error) {\n    console.error(`Error fetching from ${url}:`, error);\n    throw error;\n  }\n}\n\nexport async function getModels() {\n  console.log('getModels called');\n  return fetchWithLogging(`${API_URL}/models`);\n}\n\nexport async function getModes() {\n  console.log('getModes called');\n  return fetchWithLogging(`${API_URL}/modes`);\n}\n\nexport async function sendMessage(model, mode, message, hint) {\n  console.log('sendMessage called with:', { model, mode, message, hint });\n  return fetchWithLogging(`${API_URL}/chat`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ model, mode, message, hint }),\n  });\n}\n\n// 添加一个用于测试 API 连接的函数\nexport async function testApiConnection() {\n  console.log('Testing API connection');\n  try {\n    console.log('Test API_URL', API_URL);\n    const response = await fetch(`${API_URL}/test`);\n    console.log('Test response status:', response.status);\n    const text = await response.text();\n    console.log('Test response text:', text);\n    return text;\n  } catch (error) {\n    console.error('Error testing API connection:', error);\n    throw error;\n  }\n}\n\n// 打印 API_URL 以确保环境变量被正确加载\nconsole.log('API_URL:', API_URL);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}